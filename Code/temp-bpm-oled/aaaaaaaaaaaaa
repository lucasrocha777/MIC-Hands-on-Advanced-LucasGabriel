#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "MAX30105.h"
#include "heartRate.h"
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"

// Firebase Configuration
#define FIREBASE_PROJECT_ID "monitoramento-bpm-e-temp"
#define FIREBASE_API_KEY "YUqCN9J30XHtgZIQAb4PdcHMck1rV08HlGDC8LvW"
#define USER_EMAIL "user@example.com"  // Replace with your Firebase email
#define USER_PASSWORD "password123"    // Replace with your Firebase password

// Network Configuration
const char* ssid = "Starlink_CIT";
const char* password = "Ufrr@2024Cit";

// Sensor Configuration
const uint8_t MAX30205_ADDRESS = 0x48;
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

// Global Objects
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
MAX30105 particleSensor;
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Heart Rate Variables
const byte RATE_SIZE = 4;
byte rates[RATE_SIZE];
byte rateSpot = 0;
long lastBeat = 0;
float beatsPerMinute = 0;
int beatAvg = 0;

// Temperature Variables
float currentTemperature = 0;
float calibrationOffset = 37.0;
bool fingerDetected = false;

// Timing Control
unsigned long sendDataPrevMillis = 0;
const long sendInterval = 5000;

void setup() {
  Serial.begin(115200);
  
  // Inicialização do display com tratamento de erro aprimorado
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("Falha na alocação do SSD1306"));
    for(;;); // Loop infinito se falhar
  }
  
  // Configurações iniciais do display
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.display();
  
  // Restante do setup...
}

void updateDisplay() {
  display.clearDisplay();
  
  // Configuração de texto
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  
  // Cabeçalho
  display.setCursor(0, 0);
  display.println("Monitor de Saude");
  display.drawLine(0, 10, 127, 10, SSD1306_WHITE);

  // Temperatura
  display.setCursor(0, 15);
  display.print("Temp: ");
  display.setTextSize(2);
  display.print(currentTemperature, 1);
  display.print((char)247); // Símbolo de grau
  display.print("C");
  
  // Volta ao tamanho normal
  display.setTextSize(1);
  
  // BPM
  display.setCursor(0, 35);
  display.print("BPM: ");
  display.setTextSize(2);
  display.print((int)beatsPerMinute);
  
  // Média BPM
  display.setTextSize(1);
  display.setCursor(70, 35);
  display.print("Media: ");
  display.setTextSize(2);
  display.print(beatAvg);
  
  // Status
  display.setTextSize(1);
  display.setCursor(0, 55);
  display.print("WiFi: ");
  display.print(WiFi.status() == WL_CONNECTED ? "ON " : "OFF");
  display.print(" FB: ");
  display.print(Firebase.ready() ? "ON" : "OFF");

  // Alerta de dedo não detectado
  if(!fingerDetected) {
    display.setTextSize(1);
    display.setCursor(70, 55);
    display.print("Coloque o dedo");
  }
  
  // Alerta de febre
  if(currentTemperature >= 38.0) {
    display.setTextSize(1);
    display.setCursor(0, 55);
    display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
    display.print(" FEBRE! ");
    display.setTextColor(SSD1306_WHITE);
  }
  
  display.display(); // Esta linha é ESSENCIAL para atualizar o display
}

    // Send to Firebase
    if (millis() - sendDataPrevMillis > sendInterval) {
      sendDataPrevMillis = millis();
      if (WiFi.status() == WL_CONNECTED && Firebase.ready()) {
        sendDataToFirebase(currentTemperature, (int)beatsPerMinute, beatAvg, overTemp);
      }
    }
  } else {
    Serial.println("Temperature sensor error");
    showSplashScreen("Temp Sensor Error");
  }

  delay(1000);
}

// WiFi Connection
void connectToWiFi() {
  showSplashScreen("Connecting WiFi...");
  
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    display.print(".");
    display.display();
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected! IP: " + WiFi.localIP().toString());
    showSplashScreen("WiFi Connected");
    delay(2000);
  } else {
    Serial.println("\nWiFi connection failed");
    showSplashScreen("WiFi Failed");
    while (true);
  }
}

// Firebase Setup
void setupFirebase() {
  config.api_key = FIREBASE_API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.token_status_callback = tokenStatusCallback;
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  fbdo.setBSSLBufferSize(4096, 1024);
  fbdo.setResponseSize(2048);

  Serial.println("Firebase initialized");
}

// Temperature Sensor Functions
float readTemperature() {
  Wire.beginTransmission(MAX30205_ADDRESS);
  Wire.write(0x00);
  byte error = Wire.endTransmission(false);
  
  if (error != 0) {
    Serial.print("MAX30205 error: ");
    Serial.println(error);
    return NAN;
  }

  delay(10);

  if (Wire.requestFrom(MAX30205_ADDRESS, 2) != 2) {
    Serial.println("Insufficient data");
    return NAN;
  }

  uint8_t msb = Wire.read();
  uint8_t lsb = Wire.read();
  int16_t raw = (msb << 8) | lsb;
  float temp = raw * 0.00390625;

  if (temp < 20.0 || temp > 45.0) {
    Serial.print("Invalid temp: ");
    Serial.println(temp);
    return NAN;
  }

  return temp;
}

void calibrateTemperatureSensor() {
  showSplashScreen("Calibrating...");
  Serial.println("Calibrating sensor...");
  
  float sum = 0;
  int validReadings = 0;
  
  for (int i = 0; i < 20; i++) {
    float temp = readTemperature();
    if (!isnan(temp)) {
      sum += temp;
      validReadings++;
      delay(250);
    }
  }

  if (validReadings > 0) {
    calibrationOffset = 25.0 - (sum / validReadings);
    Serial.print("Calibration offset: ");
    Serial.print(calibrationOffset, 2);
    Serial.println(" °C");
  } else {
    Serial.println("Calibration failed");
    calibrationOffset = 0.0;
  }
}

// Heart Rate Sensor Functions
void setupHeartSensor() {
  Serial.println("Initializing MAX30102...");

  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println("MAX30102 not found");
    showSplashScreen("HR Sensor Error");
    while (true);
  }

  particleSensor.setup();
  particleSensor.setPulseAmplitudeRed(0x0A);
  particleSensor.setPulseAmplitudeGreen(0);

  Serial.println("Place finger on sensor");
}

void readHeartRate() {
  long irValue = particleSensor.getIR();
  fingerDetected = irValue > 50000;

  if (fingerDetected) {
    if (checkForBeat(irValue)) {
      long delta = millis() - lastBeat;
      lastBeat = millis();

      beatsPerMinute = 60 / (delta / 1000.0);

      if (beatsPerMinute < 255 && beatsPerMinute > 20) {
        rates[rateSpot++] = (byte)beatsPerMinute;
        rateSpot %= RATE_SIZE;

        beatAvg = 0;
        for (byte x = 0; x < RATE_SIZE; x++)
          beatAvg += rates[x];
        beatAvg /= RATE_SIZE;
      }
    }
  } else {
    // Reset values if no finger detected
    beatAvg = 0;
    beatsPerMinute = 0;
    rateSpot = 0;
    lastBeat = 0;
    
    for (byte x = 0; x < RATE_SIZE; x++)
      rates[x] = 0;
  }
}

// Display Functions
void updateDisplay() {
  display.clearDisplay();
  
  // Header
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("Health Monitor");
  display.drawLine(0, 10, 127, 10, SSD1306_WHITE);

  // Temperature
  display.setCursor(0, 15);
  display.print("Temp: ");
  display.setTextSize(2);
  display.print(currentTemperature, 1);
  display.print("°C");

  // BPM
  display.setTextSize(1);
  display.setCursor(0, 35);
  display.print("BPM: ");
  display.setTextSize(2);
  display.print((int)beatsPerMinute);

  // Avg BPM
  display.setTextSize(1);
  display.setCursor(70, 35);
  display.print("Avg: ");
  display.setTextSize(2);
  display.print(beatAvg);

  // Status indicators
  display.setTextSize(1);
  display.setCursor(0, 55);
  display.print("WiFi: ");
  display.print(WiFi.status() == WL_CONNECTED ? "OK " : "Off ");
  display.print("FB: ");
  display.print(Firebase.ready() ? "OK" : "Err");

  // Finger detection
  if (!fingerDetected) {
    display.setTextSize(1);
    display.setCursor(70, 55);
    display.print("Place finger");
  }

  // Fever alert
  if (currentTemperature >= 38.0) {
    display.setTextSize(1);
    display.setCursor(0, 55);
    display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
    display.print(" FEVER ALERT ");
    display.setTextColor(SSD1306_WHITE);
  }

  display.display();
}

void showSplashScreen(const char* message) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println(message);
  display.display();
}

// Firebase Data Sending
void sendDataToFirebase(float temperature, int bpm, int avgBpm, bool alert) {
  FirebaseJson json;
  json.set("temperature", temperature);
  json.set("bpm", bpm);
  json.set("avgBpm", avgBpm);
  json.set("feverAlert", alert);
  json.set("timestamp", millis() / 1000);

  String path = "/patients/patient1/";
  
  Serial.println("Sending to Firebase...");
  if (Firebase.RTDB.pushJSON(&fbdo, path, &json)) {
    Serial.println("Data sent");
    Serial.println("Path: " + fbdo.dataPath());
  } else {
    Serial.println("Failed: " + fbdo.errorReason());
  }
}
